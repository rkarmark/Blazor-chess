@page "/"
@namespace blazorchess.Shared

<style>
    .box {
        float: left;
        max-width: 12.5%;
        max-height: 12.5%;
        width: 80px;
        height: 80px;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: background-color 0.3s ease;
    }

    .board {
        display: block;
        max-width: 100%;
        max-height: 100%;
        width: auto;
        height: auto;
        margin: 20px;
        border: 14px solid #333;
    }

    .image {
        max-width: 75%;
        width: 60px;
        height: 60px;
        transition-duration: 0.14s;
    }

        .image:hover {
            transform: scale(1.1);
        }

    .content {
        display: flex;
        justify-content: center;
        align-items: center;
        max-width: 100%;
    }

    .dot {
        height: 25px;
        width: 25px;
        background-color: Lime;
        border-radius: 50%;
        display: inline-block;
        opacity: 0%;
        transition:ease opacity 0.25s;
    }

    .greenBorder {
        box-shadow: 0px 0px 0px 7px Lime inset;
        transition: box-shadow 0.25s ease;
    }

    .limeSquare {
        background-color: Lime;
    }

    .lightSquare {
        background-color: Moccasin;
    }

    .darkSquare {
        background-color: Peru;
    }

</style>

<div class="content">
    <div class="board">
        @for (int i = 0; i < fields.GetLength(0); i++)
        {
            <div>
                @for (int j = 0; j < fields.GetLength(1); j++)
                    {
                        Console.WriteLine(i + "," + j);
                        Console.WriteLine(fields[i, j].isSelected);
                        int x = i;
                        int y = j;
                        
                <div class="box
                     @((i - j) % 2 == 0 ? "lightSquare" : "darkSquare")
                     @(colorLegalFields(i,j) && fields[i, j].piece != null ? "greenBorder": "")"
                     style="@(fields[i,j].isSelected ? "background-color: Lime;" : "")"
                     @onclick="() => clicked(x, y)"
                     >

                    @if (fields[i, j].piece != null)
                    {
                        <img class="image"
                             src="@fields[i, j].piece?.getImage(selectedTheme)"
                             alt="@fields[i, j].piece!.color @fields[i, j].piece!.getType()" />
                    }
                    else
                    {
                        <span class="dot" style="@(colorLegalFields(i,j) && x0 != null ? "opacity:85%" : "")"></span>
                    }

                </div>
                }
            </div>
        }
    </div>
</div>

<div>
    <label>Theme:</label>
    <select @bind="selectedTheme">
        <option value="Classic">Classic</option>
        <option value="Horsey">Horsey</option>
    </select>
</div>

@code {
    //Starts by creating rows for the chessboard
    public Field[,] fields = new Field[8, 8];
    public bool[,,,] targetField = new bool[8, 8, 8, 8];
    public int? x0;
    public int? y0;
    string currentTurn = "White";
    string selectedTheme = "Classic";


    protected override void OnInitialized()
    {
        for (int i = 0; i < fields.GetLength(0); i++)
        {
            for(int j = 0; j < fields.GetLength(1); j++)
            {
                fields[i, j] = new Field();
            }
        }

        //Places pieces in starting positions
        createPiecesObjects();
        newTurn();
        currentTurn = "White";

        void createPiecesObjects()
        {
            createBackRow(0, "Black");
            createBackRow(7, "White");
            createPawnRow(1, "Black");
            createPawnRow(6, "White");

            void createBackRow(int i, string color)
            {
                fields[i, 0].piece = new Rook(color);
                fields[i, 1].piece = new Knight(color);
                fields[i, 2].piece = new Bishop(color);
                fields[i, 3].piece = new Queen(color);
                fields[i, 4].piece = new King(color);
                fields[i, 5].piece = new Bishop(color);
                fields[i, 6].piece = new Knight(color);
                fields[i, 7].piece = new Rook(color);
            }

            void createPawnRow(int i, string color)
            {
                for (int j = 0; j < fields.GetLength(1); j++)
                {
                    fields[i, j].piece = new Pawn(color);
                }
            }
        }
    }

    void newTurn()
    {
        for(int i = 0; i < targetField.GetLength(0); i++)
        {
            for (int j = 0; j < targetField.GetLength(1); j++)
            {

                for (int k = 0; k < targetField.GetLength(2); k++)
                {
                    for (int l = 0; l < targetField.GetLength(3); l++)
                    {
                        if (fields[i, j].piece == null)
                        {
                            targetField[i, j, k, l] = false;
                        } else {
                            targetField[i, j, k, l] = (fields[i, j].piece!.isMoveLegal(i, j, k, l, fields) && !checkSameTeam(i,j,k,l));
                        }
                    }
                }
            }
        }
        switch (currentTurn)
        {
            case "White":
                currentTurn = "Black";
                break;
            case "Black":
                currentTurn = "White";
                break;
        }
    }

    void clicked(int x, int y)
    {
        if (fields[x, y].isSelected)
        {
            fields[x, y].isSelected = false;
            x0 = y0 = null;
        }
        else
        {
            if (x0 == null || y0 == null)
            {
                if (fields[x, y].piece != null && fields[x, y].piece?.color == currentTurn)
                {
                    fields[x, y].isSelected = true;
                    x0 = x;
                    y0 = y;
                }
            }
            else
            {
                int x0temp = x0 ?? default(int);
                int y0temp = y0 ?? default(int);

                if (checkSameTeam(x, y, x0temp, y0temp))
                {
                    fields[x0temp, y0temp].isSelected = false;
                    fields[x, y].isSelected = true;
                    x0 = x;
                    y0 = y;
                }

                if (fields[x0temp, y0temp].piece != null && colorLegalFields(x, y))
                {
                    fields[x0temp, y0temp].piece!.firstMove = false;
                    fields[x, y].piece = fields[x0temp, y0temp].piece;
                    fields[x0temp, y0temp].piece = null;
                    fields[x, y].isSelected = false;
                    fields[x0temp, y0temp].isSelected = false;
                    x0 = y0 = null;
                    newTurn();
                }
            }
        }
    }

    bool colorLegalFields(int x, int y)
    {
        int x0temp = x0 ?? default(int);
        int y0temp = y0 ?? default(int);
        return targetField[x0temp, y0temp, x, y];
    }

    bool checkSameTeam(int x0, int y0, int x, int y)
    {
        return fields[x, y].piece?.color == fields[x0,y0].piece?.color;
    }


    }
@page "/"
@namespace blazorchess.Shared

<div class="fixed w-screen h-screen overflow-scroll	bg-cover dark:invert" style="background-image:url('./images/background.jpg">
    <div class="flex dark:invert">
        <div class="w-9/10 sm:w-2/3 ml:w-1/2 lg:w-3/8 xl:w-1/3 border-8 border-neutral-700 rounded-2xl overflow-hidden mx-auto mt-8  drop-shadow-2xl @(whiteTurn() ? "border-b-lime-500" : "border-t-lime-500")">
            <div class="grid grid-cols-8 grid-rows-8">

                @for (int i = 0; i < fields.GetLength(0); i++)
                {
                    @for (int j = 0; j < fields.GetLength(1); j++)
                    {
                        int x = i;
                        int y = j;

                        <div class="aspect-square grow flex box-border @(colorLegalFields(i,j) && fields[i, j].piece != null ? "border-4 border-lime-500": "") @(fields[i,j].isSelected ? "bg-lime-500" : ((i - j) % 2 == 0 ? "bg-orange-200" : "bg-amber-600"))" @onclick="() => clicked(x, y)" >
                            @if (fields[i, j].piece != null)
                            {
                                    <img class="w-3/4 h-3/4 m-auto" src="@fields[i, j].piece?.getImage(selectedTheme)" alt="@fields[i, j].piece!.color @fields[i, j].piece!.getType()" />
                            }
                            else
                            {
                                    <span class="w-1/3 h-1/3 m-auto bg-lime-500 rounded-full @(colorLegalFields(i,j) && x0 != null ? "" : "hidden")" ></span>
                            }
                        </div>
                    }          
                }
            </div>
        </div>
    </div>

    <div class="flex flex-col pb-16">
        <label class="block text-ml font-medium leading-6 text-gray-900 mt-4 mx-auto">Theme:</label>
        <select @bind="selectedTheme" class="m-auto mt-2 block w-64 rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
            <option value="Classic">Classic</option>
            <option value="Horsey">Horsey</option>
        </select>
    </div>
</div>





@code {
    //Starts by creating rows for the chessboard
    public Field[,] fields = new Field[8, 8];
    public bool[,,,] targetField = new bool[8, 8, 8, 8];
    public int? x0;
    public int? y0;
    string currentTurn = "White";
    string selectedTheme = "Classic";


    protected override void OnInitialized()
    {
        for (int i = 0; i < fields.GetLength(0); i++)
        {
            for (int j = 0; j < fields.GetLength(1); j++)
            {
                fields[i, j] = new Field();
            }
        }

        //Places pieces in starting positions
        createPiecesObjects();
        newTurn();
        currentTurn = "White";

        void createPiecesObjects()
        {
            createBackRow(0, "Black");
            createBackRow(7, "White");
            createPawnRow(1, "Black");
            createPawnRow(6, "White");

            void createBackRow(int i, string color)
            {
                fields[i, 0].piece = new Rook(color);
                fields[i, 1].piece = new Knight(color);
                fields[i, 2].piece = new Bishop(color);
                fields[i, 3].piece = new Queen(color);
                fields[i, 4].piece = new King(color);
                fields[i, 5].piece = new Bishop(color);
                fields[i, 6].piece = new Knight(color);
                fields[i, 7].piece = new Rook(color);
            }

            void createPawnRow(int i, string color)
            {
                for (int j = 0; j < fields.GetLength(1); j++)
                {
                    fields[i, j].piece = new Pawn(color);
                }
            }
        }
    }

    void newTurn()
    {
        for (int i = 0; i < targetField.GetLength(0); i++)
        {
            for (int j = 0; j < targetField.GetLength(1); j++)
            {

                for (int k = 0; k < targetField.GetLength(2); k++)
                {
                    for (int l = 0; l < targetField.GetLength(3); l++)
                    {
                        if (fields[i, j].piece == null)
                        {
                            targetField[i, j, k, l] = false;
                        }
                        else
                        {
                            targetField[i, j, k, l] = (fields[i, j].piece!.isMoveLegal(i, j, k, l, fields) && !checkSameTeam(i, j, k, l));
                        }
                    }
                }
            }
        }
        switch (currentTurn)
        {
            case "White":
                currentTurn = "Black";
                break;
            case "Black":
                currentTurn = "White";
                break;
        }
    }

    void clicked(int x, int y)
    {
        if (fields[x, y].isSelected)
        {
            fields[x, y].isSelected = false;
            x0 = y0 = null;
        }
        else
        {
            if (x0 == null || y0 == null)
            {
                if (fields[x, y].piece != null && fields[x, y].piece?.color == currentTurn)
                {
                    fields[x, y].isSelected = true;
                    x0 = x;
                    y0 = y;
                }
            }
            else
            {
                int x0temp = x0 ?? default(int);
                int y0temp = y0 ?? default(int);

                if (checkSameTeam(x, y, x0temp, y0temp))
                {
                    fields[x0temp, y0temp].isSelected = false;
                    fields[x, y].isSelected = true;
                    x0 = x;
                    y0 = y;
                }

                if (fields[x0temp, y0temp].piece != null && colorLegalFields(x, y))
                {
                    fields[x0temp, y0temp].piece!.firstMove = false;
                    fields[x0temp, y0temp].piece!.moveCount += 1;
                    fields[x, y].piece = fields[x0temp, y0temp].piece;
                    fields[x0temp, y0temp].piece = null;
                    fields[x, y].isSelected = false;
                    fields[x0temp, y0temp].isSelected = false;
                    x0 = y0 = null;
                    newTurn();
                }
            }
        }
    }

    bool colorLegalFields(int x, int y)
    {
        int x0temp = x0 ?? default(int);
        int y0temp = y0 ?? default(int);
        return targetField[x0temp, y0temp, x, y];
    }

    bool checkSameTeam(int x0, int y0, int x, int y)
    {
        return fields[x, y].piece?.color == fields[x0, y0].piece?.color;
    }

    bool whiteTurn()
    {
        return currentTurn == "White";
    }
}
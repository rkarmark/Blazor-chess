@page "/"
@using blazorchess.Shared

<style>
    .box {
        float: left;
        max-width: 12.5%;
        max-height: 12.5%;
        width: 80px;
        height: 80px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .board {
        display: block;
        max-width: 100%;
        max-height: 100%;
        width: auto;
        height: auto;
        margin: 20px;
        border: 14px solid #333;
    }

    .image {
        max-width: 75%;
        width: 60px;
        height: 60px;
    }

    .content {
        display: flex;
        justify-content: center;
        align-items: center;
        max-width: 100%;
    }

</style>

<div class="content">
    <div class="board">
        @for (int i = 0; i < row.Length; i++)
        {
            <div>
                @for (int j = 0; j < row[i].column.Length; j++)
                {
                    int x = i;
                    int y = j;
                    <div class="box" style="@(row[i].column[j].isSelected ? "background-color: Lime" : ((i - j) % 2 == 0 ? "background-color: Moccasin;" : "background-color: Peru;"))"
                         @onclick="() => clicked(x, y)">
                        @if (row[i].column[j].piece != null)
                        {
                            <img class="image" src="@row[i].column[j].piece?.getImage()" />
                        }

                    </div>
                }
            </div>
        }
    </div>
</div>
    


@code {
    //Starts by creating rows for the chessboard
    Column[] row = new Column[8];
    public int? x0;
    public int? y0;

    protected override void OnInitialized()
    {
        //Creates colums and Fields
        for (int i = 0; i < row.Length; i++)
        {
            row[i] = new Column();
        }
        for (int i = 0; i < row.Length; i++)
        {
            for (int j = 0; j < row[i].column.Length; j++)
            {

                row[i].column[j] = new Field();
            }
        }

        //Places pieces in starting positions
        createPiecesObjects();
    }

    class Field
    {
        public Boolean isSelected = false;
        public ChessPiece? piece;
    }

    class Column
    {
        public Field[] column = new Field[8];
    }

    void clicked(int x, int y)
    {
        Console.WriteLine(x + "," + y);
        if (row[x].column[y].isSelected)
        {
            row[x].column[y].isSelected = false;
            x0 = y0 = null;
        }
        else
        {
            row[x].column[y].isSelected = true;
            if (x0 == null || y0 == null)
            {
                x0 = x;
                y0 = y;
            }
            else
            {
                int x0temp = x0 ?? default(int);
                int y0temp = y0 ?? default(int);
                row[x].column[y].piece = row[x0temp].column[y0temp].piece;
                row[x0temp].column[y0temp].piece = null;
                row[x].column[y].isSelected = false;
                row[x0temp].column[y0temp].isSelected = false;
                x0 = y0 = null;
            }
        }
    }

    void createPiecesObjects() {
        createBackRow(0, "Black");
        createBackRow(7, "White");
        createPawnRow(1, "Black");
        createPawnRow(6, "White");

        void createBackRow(int i, string color){
            row[i].column[0].piece = new Rook(color);
            row[i].column[1].piece = new Knight(color);
            row[i].column[2].piece = new Bishop(color);
            row[i].column[3].piece = new Queen(color);
            row[i].column[4].piece = new King(color);
            row[i].column[5].piece = new Bishop(color);
            row[i].column[6].piece = new Knight(color);
            row[i].column[7].piece = new Rook(color);
        }

        void createPawnRow(int i, string color){
            for (int j = 0; j < row[i].column.Length; j++)
            {
                row[i].column[j].piece = new Pawn(color);
            }
        }

    }
    }


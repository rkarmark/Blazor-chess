@page "/"

<div class="chess">
    @for (int i = 0; i < board.Length; i++)
    {
        <div>
            @for (int j = 0; j < board[i].rowFields.Length; j++)
            {
                int x = i;
                int y = j;
                <div class="box" style="@(board[i].rowFields[j].isSelected ? "background-color: Lime" : ((i - j) % 2 == 0 ? "background-color: Moccasin;" : "background-color: Peru;"))"
                     @onclick="() => clicked(x, y)">
                    @if (board[i].rowFields[j].bricks[0] != null)
                        {
                            <img class="image" src="@board[i].rowFields[j].bricks[0].getImage()" />
                        }
                </div>
            }
        </div>
    }
</div>
    


@code {
    Row[] board = new Row[8];

    protected override void OnInitialized()
    {
        for (int i = 0; i < board.Length; i++)
        {
            board[i] = new Row();
        }
        for (int i = 0; i < board.Length; i++)
        {
            for (int j = 0; j < board[i].rowFields.Length; j++)
            {
                board[i].rowFields[j] = new Field();
            }
        }
        createBoard();
    }

    class Field
    {
        public Boolean isSelected = false;
        public Brick[] bricks = new Brick[1];
    }

    class Row
    {
        public Field[] rowFields = new Field[8];
    }


    class Brick
    {
        int x;
        int y;
        string? type;
        string? color;

        public Brick(int thisx, int thisy, string? thistype, string? thiscolor)
        {
            x = thisx;
            y = thisy;
            type = thistype;
            color = thiscolor;
        }

        public string getImage()
        {
            Console.WriteLine(type + "," + color);
            string colorchar;
            string typechar;

            if (color == "white")
            {
                colorchar = "l";
            }
            else
            {
                colorchar = "d";
            }


            if (type == "Queen")
            {
                typechar = "q";
            }
            else if (type == "King")
            {
                typechar = "k";
            }
            else if (type == "Pawn")
            {
                typechar = "p";
            }
            else if (type == "Knight")
            {
                typechar = "n";
            }
            else if (type == "Bishop")
            {
                typechar = "b";
            }
            else
            {
                typechar = "r";
            }

            Console.WriteLine("./images/" + typechar + colorchar + ".svg");
            return ("./images/" + typechar + colorchar + ".svg");
        }
    }

    void clicked(int x, int y)
    {
        Console.WriteLine(x + "," + y);
        if (board[x].rowFields[y].isSelected)
        {
            board[x].rowFields[y].isSelected = false;
        }
        else
        {
            board[x].rowFields[y].isSelected = true;
        }
    }

    void createBoard() {
        board[0].rowFields[0].bricks[0] = new Brick(0, 0, "Rook", "black");
        board[0].rowFields[1].bricks[0] = new Brick(0, 1, "Knight", "black");
        board[0].rowFields[2].bricks[0] = new Brick(0, 2, "Bishop", "black");
        board[0].rowFields[3].bricks[0] = new Brick(0, 3, "Queen", "black");
        board[0].rowFields[4].bricks[0] = new Brick(0, 4, "King", "black");
        board[0].rowFields[5].bricks[0] = new Brick(0, 5, "Bishop", "black");
        board[0].rowFields[6].bricks[0] = new Brick(0, 6, "Knight", "black");
        board[0].rowFields[7].bricks[0] = new Brick(0, 7, "Rook", "black");
        for (int i = 0; i < board[1].rowFields.Length; i++)
        {
            board[1].rowFields[i].bricks[0] = new Brick(1, i, "Pawn", "black");
        }

        board[7].rowFields[0].bricks[0] = new Brick(7, 0, "Rook", "white");
        board[7].rowFields[1].bricks[0] = new Brick(7, 1, "Knight", "white");
        board[7].rowFields[2].bricks[0] = new Brick(7, 2, "Bishop", "white");
        board[7].rowFields[3].bricks[0] = new Brick(7, 3, "Queen", "white");
        board[7].rowFields[4].bricks[0] = new Brick(7, 4, "King", "white");
        board[7].rowFields[5].bricks[0] = new Brick(7, 5, "Bishop", "white");
        board[7].rowFields[6].bricks[0] = new Brick(7, 6, "Knight", "white");
        board[7].rowFields[7].bricks[0] = new Brick(7, 7, "Rook", "white");
        for (int i = 0; i < board[1].rowFields.Length; i++)
        {
            board[6].rowFields[i].bricks[0] = new Brick(6, i, "Pawn", "white");
        }
    }
    }

